@startuml "overview"
!include C4_Container.puml

AddElementTag("microservice", $shape=EightSidedShape(), $bgColor="SteelBlue", $fontColor="white", $legendText="microservice")
AddElementTag("microfrontend", $shape=EightSidedShape(), $bgColor="Salmon", $fontColor="white", $legendText="microfrontend")
AddElementTag("consumer", $shape=RoundedBoxShape(), $bgColor="SeaGreen", $fontColor="white", $legendText="event consumer")
AddElementTag("eventstore", $shape=RoundedBoxShape(), $bgColor="LightSeaGreen", $fontColor="white", $legendText="event store")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="LightSkyBlue", $fontColor="white", $legendText="storage")
AddElementTag("authentication", $shape=RoundedBoxShape(), $bgColor="SlateGray", $fontColor="white", $legendText="authentication")

SHOW_PERSON_PORTRAIT()

Person(recruiter, Recruiter)
Person(candidate, Candidate)

System_Boundary(c1, "Gigmatch") {
    ContainerQueue(event_store, "Event Store", "Kafka", $tags = "eventstore")

    Container(dashboard, "Dashboard", "Vue.js, Nuxt", "* Manage vacancies\n*Review applications", $tags = "microfrontend")
    Container(dashboard_consumer, "Dashboard\nconsumer", "Node.js", "Handle events\nrelevant to Recruiters", $tags = "consumer")
    ContainerDb(dashboard_projections, "Dashboard\ndatabase", "MongoDB", "Projections", $tags = "storage")

    Container(match_service, "Match Service", "Spring Boot, Axon", "Core business logic", $tags = "microservice")
    ContainerDb(match_db, "Match\ndatabase", "PostgreSQL", "Source data", $tags = "storage")

    Container(website_consumer, "Website\nconsumer", ".NET", "Handle events\nrelevant to Candidates", $tags = "consumer")
    Container(website, "Website", "ASP.NET Core MVC", "* Browse vacancies\n*Apply for jobs", $tags = "microfrontend")
    ContainerDb(vacancy_search_engine, "Website\nsearch engine", "Elasticsearch", "Projections", $tags = "storage")

    Container(keycloak, "Identity / Access\nmanagement", "Keycloak", $tags = "authentication")
}

Rel_D(recruiter, dashboard, "Uses")

Rel_U(dashboard, match_service, "Sends\ncommands to", "REST API")
Rel_D(event_store, dashboard_consumer, "Consumes events")
Rel_D(dashboard, keycloak, "Authenticates user", "OpenID Connect")
Rel_D(dashboard, dashboard_projections, "Reads from")
Rel_D(dashboard_consumer, dashboard_projections, "Writes projections to")

Rel_U(match_service, event_store, "Produces events")
Rel_D(match_service, match_db, "Stores data in")

Rel_D(candidate, website, "Uses")

Rel_U(website, match_service, "Sends\ncommands to", "REST API")
Rel_D(website, keycloak, "Authenticates user", "OpenID Connect")
Rel_D(event_store, website_consumer, "Consumes events")
Rel_D(website_consumer, vacancy_search_engine, "Writes projections to")
Rel_D(website, vacancy_search_engine, "Reads from")

SHOW_LEGEND($details=Small())

@enduml
